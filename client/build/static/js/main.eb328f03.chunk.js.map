{"version":3,"sources":["store/actions.ts","store/index.ts","store/selectors.ts","socket/socket.js","components/TickerRow/TickerRow.tsx","components/usePrevious/usePreviousPrice.tsx","components/TickersList/TickersList.tsx","components/HomePage/HomePage.tsx","components/NotFoundPage/NotFoundPage.tsx","App.tsx","reportWebVitals.js","index.jsx"],"names":["LOAD_TICKERS","ADD_TICKER","DELETE_TICKER","initialState","tickersList","userTickersList","store","createStore","state","action","type","payload","concat","filter","ticks","ticker","composeWithDevTools","getTickersSelector","getUserTickersSelector","socket","io","TickerRow","exchange","price","change","change_percent","dividend","last_trade_time","dispatch","useDispatch","deleteTicker","useCallback","previousPrice","value","ref","useRef","useEffect","current","usePreviousPrice","className","classNames","onClick","TickersList","useSelector","selectedTickers","tickersListToRender","some","tick","emit","on","response","close","addTicker","includes","length","map","HomePage","NotFoundPage","App","to","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eb328f03.chunk.js","sourcesContent":["import { \n  deleteTickerActionType,\n  addTickerActionType,\n  loadTickersActionType,\n  Tickers }\nfrom '../react-app-env';\n\nexport const LOAD_TICKERS = 'LOAD_TICKERS';\nexport const ADD_TICKER = 'ADD_TICKER';\nexport const DELETE_TICKER = 'DELETE_TICKER';\n\nexport const loadTickersAction = (\n  payload: Tickers[]\n): loadTickersActionType => ({\n  type: LOAD_TICKERS,\n  payload,\n});\n\nexport const addTickerAction = (\n  payload: Tickers\n): addTickerActionType => ({\n  type: ADD_TICKER,\n  payload,\n});\n\nexport const deleteTickerAction = (\n  payload: string\n): deleteTickerActionType => ({\n  type: DELETE_TICKER,\n  payload,\n});\n","import { \n  LOAD_TICKERS, \n  ADD_TICKER,\n  DELETE_TICKER,\n} from './actions';\nimport { createStore, AnyAction } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { RootState } from \"../react-app-env\";\n\nexport const initialState: RootState = {\n  tickersList: [],\n  userTickersList: [],\n};\n\nexport const rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case LOAD_TICKERS:\n      return ({\n        ...state,\n        tickersList: action.payload,\n      });\n    case ADD_TICKER:\n      return ({\n        ...state,\n        userTickersList: state.userTickersList.concat(action.payload),\n      });\n    case DELETE_TICKER:\n      return ({\n        ...state,\n        userTickersList: state.userTickersList\n          .filter(ticks => ticks.ticker !== action.payload),\n      }); \n    \n      default:\n        return state;\n    }\n  };\n  \nexport const store = createStore(\n    rootReducer,\n    composeWithDevTools(),\n  );\n  \n  export default store;\n  ","import { RootState, Tickers } from '../react-app-env';\n\nexport const getTickersSelector = (state: RootState):Tickers[] => \n  state.tickersList;\n\nexport const getUserTickersSelector = (state: RootState):Tickers[] => \n  state.userTickersList;\n\n","import { io } from 'socket.io-client';\n\nexport const socket = io(\n  \"https://api-server-anastasiia-sharkova.herokuapp.com/\"\n);\n","import React, { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { deleteTickerAction } from '../../store/actions';\nimport { Tickers } from '../../react-app-env';\nimport { usePreviousPrice } from '../usePrevious';\nimport classNames from 'classnames';\nimport './TickerRow.scss';\n\ntype Props = Tickers;\n\nexport const TickerRow: React.FC<Props> = ({\n    ticker, \n    exchange,\n    price, \n    change, \n    change_percent,\n    dividend,\n    last_trade_time\n}) => {\n  const dispatch = useDispatch();\n  const deleteTicker = useCallback((ticker: string) => {\n    dispatch(deleteTickerAction(ticker))\n  }, [])\n  const previousPrice = usePreviousPrice(price);\n\n  return (\n    <tr className={classNames(\"TickerRow \",\n      {\n        \"TickerRow--AAPL\":\n        ticker === 'AAPL',\n      },\n      {\n        \"TickerRow--GOOGL\":\n        ticker === 'GOOGL',\n      },\n      {\n        \"TickerRow--MSFT\":\n        ticker === 'MSFT',\n      },\n      {\n        \"TickerRow--AMZN\":\n        ticker === 'AMZN',\n      },\n      {\n        \"TickerRow--FB\":\n        ticker === 'FB',\n      },\n      {\n        \"TickerRow--TSLA\":\n        ticker === 'TSLA',\n      }\n    )}\n    >\n      <td className=\"TickerRow__data TickerRow__data--column\">{ticker}</td>\n      <td className=\"TickerRow__data TickerRow__data--none\">{exchange}</td>\n      <td className={classNames(\n        \"TickerRow__data\",\n        \"TickerRow__data--priceDown\", \n        \"TickerRow__data--currency\",\n        {\n          \"TickerRow__data--priceUp\":\n          previousPrice,\n        }\n      )}\n      >\n        {price}\n      </td>\n      <td className=\"TickerRow__data TickerRow__data--currency\">{change}</td>\n      <td className=\"TickerRow__data TickerRow__data--none\">\n        {change_percent}\n      </td>\n      <td className=\"TickerRow__data TickerRow__data--none\">{dividend}</td>\n      <td className=\"\n        TickerRow__data\n        TickerRow__data--size \n        TickerRow__data--none\"\n      >\n        {last_trade_time}\n      </td>\n      <td>\n        <button \n          type=\"button\"\n          onClick={() => deleteTicker(ticker)}\n          className=\"TickerRow__button\"\n        >\n          X\n        </button> \n      </td>\n    </tr>\n  )\n}\n","import { useRef, useEffect } from \"react\";\nimport { MutableRefObject } from \"react\";\n\nexport const usePreviousPrice = (value: number): boolean => {\n\n  const ref: MutableRefObject<number | undefined> = useRef();\n\n  useEffect(() => {\n      ref.current = value;\n  }, [value]);\n\n  if (ref.current && ref.current > value) {\n      return false;\n  }\n  return true;\n}\n","import React, { useCallback, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Tickers } from '../../react-app-env';\nimport { getTickersSelector, getUserTickersSelector }\n  from '../../store/selectors';\nimport { loadTickersAction, addTickerAction } from '../../store/actions';\nimport { socket } from '../../socket/socket';\nimport classNames from 'classnames';\nimport { TickerRow } from '../TickerRow';\nimport './TickersList.scss';\n\nexport const TickersList: React.FC = () => {\n  const dispatch = useDispatch();\n  const tickersList: Tickers[] = useSelector(getTickersSelector);\n  const selectedTickers: Tickers[] = useSelector(getUserTickersSelector);\n  const tickersListToRender: Tickers[] = tickersList\n    .filter((ticker: Tickers) => selectedTickers\n    .some(tick => tick.ticker === ticker.ticker))\n  \n  useEffect(() => {\n    socket.emit('start');\n    socket.on(\n      'ticker',\n      (response: Tickers[]) => {\n        dispatch(loadTickersAction(response));\n      }\n    );\n    \n    return () => {\n      socket.close();\n    }\n  }, [dispatch])\n\n\n  const addTicker = useCallback((ticker: Tickers) => {\n    if (tickersListToRender.includes(ticker)) {\n      return tickersListToRender;\n    } else {\n      dispatch(addTickerAction(ticker));\n    }\n  }, [dispatch])\n\n  return (\n    <>\n      <ul className=\"TickersList__list\">\n      {tickersList.length > 0 ? (\n        tickersList.map((ticker) => (\n          <li\n            className={classNames(\"TickersList__item\",\n            {\n              \"TickersList__item--selected\":\n              tickersListToRender.includes(ticker)\n            })}\n            onClick={() => addTicker(ticker)}\n            key={ticker.ticker}\n            {...ticker}\n          >\n            <span className={classNames(\n              {\n                \"TickersList--AAPL\":\n                ticker.ticker === 'AAPL',\n              },\n              {\n                \"TickersList--GOOGL\":\n                ticker.ticker === 'GOOGL',\n              },\n              {\n                \"TickersList--MSFT\":\n                ticker.ticker === 'MSFT',\n              },\n              {\n                \"TickersList--AMZN\":\n                ticker.ticker === 'AMZN',\n              },\n              {\n                \"TickersList--FB\":\n                ticker.ticker === 'FB',\n              },\n              {\n                \"TickersList--TSLA\":\n                ticker.ticker === 'TSLA',\n              }\n            )}\n            >{ticker.ticker}</span>\n              <span>{ticker.price}$</span>\n          </li>\n        ))\n      ) : (\n        <span>Loading...</span>\n      )}\n      </ul>\n      {selectedTickers.length > 0 ? (\n        <table className=\"TickersList__table\">\n          <thead>\n            <tr>\n              <th className=\"TickersList__table-header\" />\n              <th className=\"TickersList__table-header\">Symbol</th>\n              <th className=\"\n                TickersList__table-header \n                TickersList__table-header--none\"\n              >\n                Exchange\n              </th>\n              <th className=\"TickersList__table-header\">Price</th>\n              <th className=\"TickersList__table-header\">Change</th>\n              <th className=\"\n                TickersList__table-header\n                TickersList__table-header--none\"\n              >\n                % Change\n              </th>\n              <th className=\"\n                TickersList__table-header\n                TickersList__table-header--none\"\n              >\n                Dividend\n              </th>\n              <th className=\"\n                TickersList__table-header\n                TickersList__table-header--none\"\n              >\n                Last trade time\n              </th>\n              <th className=\"TickersList__table-header\" />\n            </tr>\n          </thead>\n   \n          <tbody className=\"TickersList__table-body\">\n            {tickersListToRender\n              .map((ticker) => (\n              <TickerRow\n                key={ticker.ticker}\n                {...ticker}\n              />\n            ))}\n          </tbody>\n        </table>\n      ) : (\n        <p className=\"TickersList__message\">\n          Tickers are not selected. Please select a ticker...\n        </p>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport './HomePage.scss';\n\nexport const HomePage: React.FC = () => (\n  <article className=\"HomePage\">\n    <div  className=\"HomePage__image\" />\n    <h1 className=\"HomePage__title\">What Is a Stock Ticker?</h1>\n    <h5 className=\"HomePage__autor\">\n      By ADAM HAYES \n      <span className=\"HomePage__autor--date\">Updated December 25, 2021</span>\n    </h5>\n    <p>\n      As anyone who has ever watched a financial network or\n      checked out a market web site knows,\n      security prices, particularly those of stocks, are frequently on the move.\n      A stock ticker is a report of the price of certain securities,\n      updated continuously throughout the trading\n      session by the various stock market exchanges.\n    </p>\n    <p>\n      A &laquo;tick&raquo; is any change in the price of the security,\n      whether that movement is up or down.\n      A stock ticker automatically displays these ticks,\n      along with other relevant information, like trading volume,\n      that investors and traders use to stay informed about\n      current market conditions and the interest in that particular security.\n    </p>\n    <ul className=\"HomePage__list\">\n      KEY TAKEAWAYS\n      <li className=\"HomePage__item\">\n        A stock ticker reports transaction and price data for a security,\n        updated continuously throughout the day.\n        </li>\n      <li className=\"HomePage__item\">\n        A stock ticker typically reports on the most active\n        securities or ones making headlines on a given day.\n      </li>\n      <li className=\"HomePage__item\">\n        The ticker typically shows the ticker symbol,\n        the price change and percentage change from the previous \n        session&#39;s close, and often the volume of the shares being traded\n      </li>\n      <li className=\"HomePage__item\">\n        Some tickers color code information to reflect the direction of\n        the price, with green for higher, red for lower, \n        and a neutral color like gray or tan for no change.\n      </li>\n    </ul>\n  </article>\n);\n","import React from 'react';\nimport './NotFoundPage.scss';\n\nexport const NotFoundPage: React.FC = () => (\n  <div className=\"NotFoundPage\"> \n    Whoops... there&#8217;s a problem!\n    This page does not exist!\n  </div>\n);","import React from 'react';\nimport { TickersList } from './components/TickersList';\nimport { Routes, Route, Link } from 'react-router-dom';\nimport { HomePage } from './components/HomePage';\nimport { NotFoundPage } from './components/NotFoundPage';\nimport './App.scss';\n\nconst App: React.FC = () => (\n  <section className=\"App\">\n      <nav>\n      <Link\n        to=\"/\"\n        className=\"App__link\"\n      >\n        Home\n      </Link>\n      <Link\n        to=\"/TichersPage\"\n        className=\"App__link\"\n      >\n        Trending Tickers\n      </Link>\n    </nav>\n\n    <Routes>\n      <Route\n        path=\"/\"\n        element={<HomePage />}\n      />\n      <Route\n        path=\"TichersPage\"\n        element={<TickersList />}\n      />\n      <Route\n        path=\"*\"\n        element={<NotFoundPage />}\n      />\n    </Routes>\n  </section>\n  \n)\n\nexport default App;\n","// eslint-disable-next-line\nconst reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom'\nimport { store } from './store';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst Root = () => (\n  <Provider store={store}>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n\nreportWebVitals();\n"],"sourceRoot":""}